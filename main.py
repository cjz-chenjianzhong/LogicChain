
from openai import OpenAI

g_system_prompt = "您是一个规则专家系统，根据收到的信息，判断每个规则的条件是否被满足；任一规则的条件被满足，则输出对应的动作; 条件不满足的规则不用输出说明；如果规则的条件都没有被满足，则输出“没有触发任何规则”；用中文回答。"

query = """
规则:
规则0：如果收到图片，并询问有关骑车安全、骑车佩戴安全帽、骑车要求相关问题，调用行人骑车佩戴安全帽检测能力；
规则1：如果收到图片，并询问有关火灾、火焰、烟雾、消防相关问题，调用烟雾目标检测能力和火焰目标检测能力；
规则2：如果收到图片，并询问有关工地施工、施工安全相关问题，调用安全帽目标检测能力和背光服目标检测能力；
规则3：如果收到地面卫生、街道卫生、垃圾相关问题，调用垃圾目标检测能力；
规则4：如果收到图片，并询问有统计人数之类问题，调用人数统计能力；
规则5：如果收到图片，并询问考试时候考试动作相关问题，并且具体描述了考生动作，则解析后以list方式列出具体的考生动作；
规则6：如果收到图片，并询问考试时站立相关动作，则调用站立目标检测能力；
规则7：如果收到图片，并询问考试时举手相关动作，则调用举手目标检测能力；
规则8：如果收到图片，并询问考试时弯腰捡东西相关动作，则调用弯腰捡东西目标检测能力；
规则9：如果收到图片，并咨询排队相关，则调用排队检测能力；
规则10：如果收到视频，并咨询聊天、说话、交头接耳相关，则调用交头接耳检测能力；
规则11：如果收到图片，并咨询考试时有没有作弊或违规，则调用考场站立检测能力、考场弯腰捡东西检测能力，考场左顾右盼检测能力，考场传递东西检测能力。


收到信息:
收到一张图片，收到信息为：“检测下是否带安全帽”；
"""

client = OpenAI(
    api_key="sk-JUP6iI3HUX8MwYnhLUSeT1n5jjeFquh9ez8XzMvqti9ZT11I",
    base_url="https://api.moonshot.cn/v1",
)

completion = client.chat.completions.create(
    model="moonshot-v1-8k",
    messages=[
        {
            "role": "system",
            "content": g_system_prompt
        },
        {
            "role": "user",
            "content": query
        }
    ],
    temperature=0.3,
)

print(completion.choices[0].message)

'''
from openai import OpenAI

g_system_prompt = "您是一个规则专家系统，根据收到的信息，判断每个规则的条件是否被满足；任一规则的条件被满足，则输出对应的动作; 条件不满足的规则不用输出说明；如果规则的条件都没有被满足，则输出“没有触发任何规则”；用中文回答。"

client = OpenAI(
    api_key="sk-JUP6iI3HUX8MwYnhLUSeT1n5jjeFquh9ez8XzMvqti9ZT11I",
    base_url="https://api.moonshot.cn/v1",
)

history = [
    {
        "role": "system",
        "content": g_system_prompt
    }
]


def chat(query, history):
    history += [{
        "role": "user",
        "content": query
    }]
    completion = client.chat.completions.create(
        model="moonshot-v1-8k",
        messages=history,
        temperature=0.3,
    )
    result = completion.choices[0].message.content
    history += [{
        "role": "assistant",
        "content": result
    }]
    return result

query = """
规则:
规则0：如果收到图片，并询问有关骑车安全、骑车佩戴安全帽、骑车要求相关问题，调用行人骑车佩戴安全帽检测能力；
规则1：如果收到图片，并询问有关火灾、火焰、烟雾、消防相关问题，调用烟雾目标检测能力和火焰目标检测能力；
规则2：如果收到图片，并询问有关工地施工、施工安全相关问题，调用安全帽目标检测能力和背光服目标检测能力；
规则3：如果收到地面卫生、街道卫生、垃圾相关问题，调用垃圾目标检测能力；
规则4：如果收到图片，并询问有统计人数之类问题，调用人数统计能力；
规则5：如果收到图片，并询问考试时候考试动作相关问题，并且具体描述了考生动作，则解析后以list方式列出具体的考生动作；
规则6：如果收到图片，并询问考试时站立相关动作，则调用站立目标检测能力；
规则7：如果收到图片，并询问考试时举手相关动作，则调用举手目标检测能力；
规则8：如果收到图片，并询问考试时弯腰捡东西相关动作，则调用弯腰捡东西目标检测能力；
规则9：如果收到图片，并咨询排队相关，则调用排队检测能力；
规则10：如果收到视频，并咨询聊天、说话、交头接耳相关，则调用交头接耳检测能力；
规则11：如果收到图片，并咨询考试时有没有作弊或违规，则调用考场站立检测能力、考场弯腰捡东西检测能力，考场左顾右盼检测能力，考场传递东西检测能力。


收到信息:
收到一张图片，收到信息为：“检测下是否带安全帽”；
"""

print(chat(query, history))
'''

